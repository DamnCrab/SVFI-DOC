import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as t,c as p,b as a,d as e,a as o,w as r,e as l}from"./app-hKaVSfd0.js";const c={},d={class:"hint-container warning"},u=a("p",{class:"hint-container-title"},"Warning",-1),m=l(`<p>SVFI supports running via the command line</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>To avoid possible performance loss, performing tasks using pure OLS command line is the fastest.<br> In possible cases, using the full VSPipe workflow is the fastest.</p></div><h2 id="environment-setup" tabindex="-1"><a class="header-anchor" href="#environment-setup" aria-hidden="true">#</a> Environment Setup</h2><ol><li>Create a new <code>steam_appid.txt</code> in the SVFI installation root directory and fill in the following content:</li></ol><blockquote><p>1692080</p></blockquote><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Filling in this text file will cause SVFI to start in standalone application mode to avoid interference from the Steam client.</p><p>This can achieve special operations such as <strong>multiple instances of the software</strong>, <strong>software installation location migration</strong>, and <strong>software version preservation</strong>.</p><ul><li>Software version preservation: After reverting to a specified branch in Steam operations, copy the entire SVFI installation folder and ensure that <code>steam_appid.txt</code> exists. From then on, you can click <code>SVFI.Professional</code> or <code>SVFI.Community</code> in this folder to run this version of SVFI.</li><li>It is recommended to turn off the forced exit option in the preference settings to avoid all OLS processes exiting after the SVFI task is completed.</li></ul><ol><li>Start the command prompt <code>cmd</code> in the <strong>SVFI installation root directory</strong> (if the installation location is not on the system drive, administrator privileges are not required). Enter <code>one_line_shot_args -h</code> and press Enter. You should be able to see the following similar content:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>usage: #### SVFI CLI tool by Jeanna #### [-h] -i INPUT --config CONFIG -t TASK_ID [--concat-only] [--extract-only] [--render-only]
[--force-args FORCE_ARGS [FORCE_ARGS...]] [-p] [--pipe-in] [--pipe-out] [--pipe-iwPIPE_IN_WIDTH]
[--pipe-ih PIPE_IN_HEIGHT] [--pipe-in-fps PIPE_IN_FPS]
[--pipe-in-pixfmt {rgb24,rgb48be,rgb48le,gbrp,gbrp16le}] [--pipe-rgb]
[--pipe-colormatrix {470bg,170m,2020ncl,709}]

To enhance Long video/image sequence quality

options:
  -h, --help            show this help message and exit

Basic Settings:
  -i INPUT, --input INPUT
                        Path of input video/image sequence folder. leave &#39;-&#39; for stdin.
  --config CONFIG       Path of config, should be.ini or.json file.
  -t TASK_ID, --task-id TASK_ID
                        13-digit Task id, can not leave blank
  --concat-only         Concat Chunk only
  --extract-only        Extract input to frames Only
  --render-only         Render only without VFI process
  --force-args FORCE_ARGS [FORCE_ARGS...]
                        Force to update config. Examples: --force-args output_chunk_cnt=-1 interp_start=-1
  -p, --preview         [Dilapidated] Preview Settings.

Pipe Settings:
  Set the follow parameters when &#39;-mid&#39; is assigned, or you will encounter exceptions.Output Y4M at YUV444P10

  --pipe-in             This enables OLS to obtain input data from stdin, use with &#39;-i -&#39;
  --pipe-out            This enables OLS to pipe y4m or rgb/rgb48be output to stdout
  --pipe-iw PIPE_IN_WIDTH
                        Width of input raw RGB, effective and mandatory when --pipe-in appointed
  --pipe-ih PIPE_IN_HEIGHT
                        Height of input raw RGB, effective and mandatory when --pipe-in appointed
  --pipe-in-fps PIPE_IN_FPS
                        Input stream FPS, effective and mandatory when --pipe-in appointed
  --pipe-in-pixfmt {rgb24,rgb48be,rgb48le,gbrp,gbrp16le}
                        Pixel format of input raw RGB input, effective and mandatory when --pipe-in appointed
  --pipe-rgb            Pipe pixel format of rgb or rgb48be raw data to stdout, otherwise pipe y4m. Effective when --pipe-out appointed
  --pipe-colormatrix {470bg,170m,2020ncl,709}
                        Colormatrix for RGB-YUV Conversion, effective when --pipe-in appointed and --pipe-rgb NOT appointed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="explanation-of-typical-usage-scenarios" tabindex="-1"><a class="header-anchor" href="#explanation-of-typical-usage-scenarios" aria-hidden="true">#</a> Explanation of typical usage scenarios</h2><h3 id="running-multiple-instances-of-svfi" tabindex="-1"><a class="header-anchor" href="#running-multiple-instances-of-svfi" aria-hidden="true">#</a> Running multiple instances of SVFI</h3><p>The <code>one_line_shot_args</code> (hereinafter referred to as <code>OLS</code>) program supports running multiple instances after completing the above configuration and supports synchronous operation of multiple tasks. Please note that this may cause significant resource consumption.</p><p>Three required parameters:</p><ul><li><code>--input</code>: The folder where the video file or image sequence to be processed for image quality is located.</li><li><code>--config</code>: The configuration file generated by the SVFI GUI program, generally located in the Configs folder of the installation directory.</li><li><code>--task-id</code>: The task ID, a non-empty string used to distinguish different tasks.</li></ul><h3 id="pipe-input" tabindex="-1"><a class="header-anchor" href="#pipe-input" aria-hidden="true">#</a> Pipe input</h3><p>SVFI supports inputting RGB streams from other processes. Currently, it supports five pixel formats of raw stream input: <code>rgb24, rgb48be, rgb48le, gbrp, gbrp16le</code>.</p><p>You must fill in <code>--pipe-in</code> to enable the SVFI pipe input function and additionally specify <code>--pipe-iw</code> for the input image pixel length, <code>--pipe-ih</code> for the width, and <code>--pipe-in-fps</code> for the input stream frame rate (only floating-point numbers are supported), and <code>--pipe-in-pixfmt</code> for the input pixel format.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ul><li><p><code>rgb48be, rgb48le, gbrp16le</code> indicates that the input data is 48-bit and 16-bit high-precision input.</p></li><li><p>When using VSPipe to output an RGB stream and OLS accepts the RGB stream, if you are unsure about the RGB output channel order of VSPipe, please specify the <code>--pipe-in-pixfmt</code> parameter of ols as <code>gbrp</code> or <code>gbrp16le</code>.</p></li></ul></div></div><h3 id="pipe-output" tabindex="-1"><a class="header-anchor" href="#pipe-output" aria-hidden="true">#</a> Pipe output</h3><p>SVFI supports outputting <code>rgb24</code> or <code>rgb48be</code> or <code>YUV444P10</code> Y4M streams to <code>stdout</code>.</p><p>You must fill in <code>--pipe-out</code> to enable this function.</p><ul><li>If you need to output <code>YUV444P10</code>, please specify <code>--pipe-colormatrix</code> for SVFI to perform correct color conversion from RGB to YUV streams. Y4M output is the default operation.</li><li>If you want to output an <code>RGB</code> stream, please specify <code>--pipe-rgb</code>. The specific output pixel format is controlled by various options in the configuration file. Generally, if the high-precision workflow is enabled, <code>rgb48</code> is output; otherwise, <code>rgb24</code> is output if the non-high-precision workflow is used.</li></ul><h3 id="forcibly-specifying-the-gpu-number-used-by-svfi" tabindex="-1"><a class="header-anchor" href="#forcibly-specifying-the-gpu-number-used-by-svfi" aria-hidden="true">#</a> Forcibly specifying the GPU number used by SVFI</h3><ul><li>Select the first item in the GPU drop-down list in the SVFI interface to start the task, generate a task configuration file, and then create another command line cmd according to the online tutorial.</li><li>Enter <code>set CUDA_VISIBLE_DEVICES=1</code> and press Enter.</li><li>Call <code>OLS</code> to run SVFI on the GPU in the second slot of PCIE.</li><li>This method can solve the problem of not being able to specify which graphics card to use when using int8 quantization.</li></ul><h3 id="command-line-examples" tabindex="-1"><a class="header-anchor" href="#command-line-examples" aria-hidden="true">#</a> Command line examples</h3><h4 id="batch-processing-all-mp4-webm-and-gif-files-in-a-folder-using-the-same-set-of-settings" tabindex="-1"><a class="header-anchor" href="#batch-processing-all-mp4-webm-and-gif-files-in-a-folder-using-the-same-set-of-settings" aria-hidden="true">#</a> Batch processing all mp4, webm, and gif files in a folder using the same set of settings</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> %i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&quot;folder path/*.mp4&quot;</span> <span class="token string">&quot;folder path/*.webm&quot;</span> <span class="token string">&quot;folder path/*.gif&quot;</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>one_line_shot_args.exe <span class="token parameter variable">--input</span> <span class="token string">&quot;%i&quot;</span> --task-id <span class="token string">&quot;%~ni&quot;</span> <span class="token parameter variable">--config</span> <span class="token string">&quot;SVFI_Config_vfi_sr.ini&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Among them:</p><ul><li>It should be executed using the command prompt <code>cmd</code> in the root directory of the SVFI installation software.</li><li><code>SVFI_Config_vfi_sr.ini</code> is the setting file exported by clicking the export settings button below the advanced settings.</li><li>This operation will output all files to the folder specified in the configuration file.</li></ul><h4 id="example-1-ffmpeg-ols-ffmpeg" tabindex="-1"><a class="header-anchor" href="#example-1-ffmpeg-ols-ffmpeg" aria-hidden="true">#</a> Example 1: <code>ffmpeg-&gt;OLS-&gt;ffmpeg</code></h4><blockquote><p>Use <code>ffmpeg</code> for high-precision 16-bit frame extraction, input <code>OLS</code> for only compression processing, and output high-precision <code>rgb48be</code> to <code>ffmpeg</code> for compression.</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-vsync</span> passthrough <span class="token parameter variable">-hwaccel</span> auto <span class="token parameter variable">-i</span> test.mp4 <span class="token parameter variable">-map</span> <span class="token number">0</span>:v:0 <span class="token parameter variable">-sws_flags</span> +bicubic+full_chroma_int+accurate_rnd <span class="token parameter variable">-vf</span> copy,format<span class="token operator">=</span>yuv444p10le,format<span class="token operator">=</span>rgb48be,minterpolate<span class="token operator">=</span>fps<span class="token operator">=</span><span class="token number">24.000</span>:mi_mode<span class="token operator">=</span>dup <span class="token parameter variable">-f</span> image2pipe <span class="token parameter variable">-pix_fmt</span> rgb48 <span class="token parameter variable">-vcodec</span> rawvideo - <span class="token operator">|</span> one_line_shot_args.exe <span class="token parameter variable">-i</span> - <span class="token parameter variable">--config</span> <span class="token string">&quot;Configs/SVFI_Config_pipe_test.ini&quot;</span> <span class="token parameter variable">-t</span> pipe_2 --pipe-in --pipe-iw <span class="token number">1920</span> --pipe-ih <span class="token number">1080</span>  --pipe-in-fps <span class="token number">24</span> --render-only --pipe-out --pipe-rgb --pipe-in-pixfmt rgb48be <span class="token operator">|</span> ffmpeg.exe <span class="token parameter variable">-y</span> <span class="token parameter variable">-vsync</span> cfr <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-vsync</span> cfr <span class="token parameter variable">-pix_fmt</span> rgb48be <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-r</span> <span class="token number">24</span> <span class="token parameter variable">-i</span> - <span class="token parameter variable">-preset:v</span> slow <span class="token parameter variable">-c:v</span> hevc_nvenc <span class="token parameter variable">-pix_fmt</span> yuv420p <span class="token parameter variable">-crf</span> <span class="token number">16</span> output.mp4 <span class="token parameter variable">-y</span> <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-hide_banner</span> <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="example-2-ffmpeg-ols-ols-ffmpeg" tabindex="-1"><a class="header-anchor" href="#example-2-ffmpeg-ols-ols-ffmpeg" aria-hidden="true">#</a> Example 2: <code>ffmpeg-&gt;OLS-&gt;OLS-&gt;ffmpeg</code></h4><blockquote><p>Use <code>ffmpeg</code> for high-precision 16-bit frame extraction, input the first <code>OLS</code> pipeline for upscaling processing, input the second <code>OLS</code> pipeline for frame interpolation processing, and output <code>Y4M</code> to <code>ffmpeg</code> for compression.</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-vsync</span> passthrough <span class="token parameter variable">-hwaccel</span> auto <span class="token parameter variable">-i</span> test.mp4 <span class="token parameter variable">-map</span> <span class="token number">0</span>:v:0 <span class="token parameter variable">-sws_flags</span> +bicubic+full_chroma_int+accurate_rnd <span class="token parameter variable">-vf</span> copy,format<span class="token operator">=</span>yuv444p10le,format<span class="token operator">=</span>rgb48be,format<span class="token operator">=</span>rgb24,minterpolate<span class="token operator">=</span>fps<span class="token operator">=</span><span class="token number">24.000</span>:mi_mode<span class="token operator">=</span>dup <span class="token parameter variable">-f</span> image2pipe <span class="token parameter variable">-pix_fmt</span> rgb48be <span class="token parameter variable">-vcodec</span> rawvideo - <span class="token operator">|</span> one_line_shot_args.exe  <span class="token parameter variable">-i</span> - <span class="token parameter variable">--config</span> Configs/SVFI_Config_pipe_1.ini <span class="token parameter variable">-t</span> pipe_1 --pipe-in --pipe-iw <span class="token number">960</span> --pipe-ih <span class="token number">540</span> --pipe-in-fps <span class="token number">24</span> --render-only --pipe-out --pipe-rgb --pipe-in-pixfmt rgb48be <span class="token operator">|</span> one_line_shot_args.exe <span class="token parameter variable">-i</span> - <span class="token parameter variable">--config</span> Configs/SVFI_Config_pipe_2.ini <span class="token parameter variable">-t</span> pipe_2 --pipe-in --pipe-iw <span class="token number">1920</span> --pipe-ih <span class="token number">1080</span>  --pipe-in-fps <span class="token number">24</span> --pipe-out --pipe-in-pixfmt rgb48be <span class="token operator">|</span> ffmpeg.exe <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-hide_banner</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">-vsync</span> cfr <span class="token parameter variable">-i</span> - <span class="token parameter variable">-preset:v</span> slow <span class="token parameter variable">-c:v</span> hevc_nvenc <span class="token parameter variable">-pix_fmt</span> yuv420p <span class="token parameter variable">-crf</span> <span class="token number">16</span> output.mp4 <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="example-3-vapoursynth-ffmpeg-ols-ffmpeg" tabindex="-1"><a class="header-anchor" href="#example-3-vapoursynth-ffmpeg-ols-ffmpeg" aria-hidden="true">#</a> Example 3: <code>Vapoursynth-&gt;ffmpeg-&gt;OLS-&gt;ffmpeg</code></h4><blockquote><p>Use <code>Vapoursynth</code> for preprocessing the input, input <code>ffmpeg</code> for converting <code>Y4M</code> to high-precision <code>rgb48be</code>, then to low-precision <code>rgb24</code>, input <code>OLS</code> for processing and compression.</p></blockquote><p>The <code>Vapoursynth</code> script <code>input.vpy</code> used:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> vapoursynth <span class="token keyword">as</span> vs
<span class="token keyword">from</span> vapoursynth <span class="token keyword">import</span> core
video <span class="token operator">=</span> core<span class="token punctuation">.</span>lsmas<span class="token punctuation">.</span>LWLibavSource<span class="token punctuation">(</span><span class="token string">r&#39;test.mp4&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 960x540, 24fps</span>

<span class="token comment"># DO SOMETHING</span>

video<span class="token punctuation">.</span>set_output<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># output yuv</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Command line:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vspipe input.vpy <span class="token parameter variable">--y4m</span> - <span class="token operator">|</span> ffmpeg <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-vsync</span> passthrough <span class="token parameter variable">-hwaccel</span> auto <span class="token parameter variable">-i</span> - <span class="token parameter variable">-map</span> <span class="token number">0</span>:v:0 <span class="token parameter variable">-sws_flags</span> +bicubic+full_chroma_int+accurate_rnd <span class="token parameter variable">-vf</span> copy,format<span class="token operator">=</span>yuv444p10le,format<span class="token operator">=</span>rgb48be,format<span class="token operator">=</span>rgb24,minterpolate<span class="token operator">=</span>fps<span class="token operator">=</span><span class="token number">24.000</span>:mi_mode<span class="token operator">=</span>dup <span class="token parameter variable">-f</span> image2pipe <span class="token parameter variable">-pix_fmt</span> rgb24 <span class="token parameter variable">-vcodec</span> rawvideo - <span class="token operator">|</span>  one_line_shot_args.exe  <span class="token parameter variable">-i</span> - <span class="token parameter variable">--config</span> Configs/SVFI_Config_pipe_test.ini <span class="token parameter variable">-t</span> pipe_2 --pipe-in --pipe-iw <span class="token number">960</span> --pipe-ih <span class="token number">540</span>  --pipe-in-fps <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="example-4-vapoursynth-ols-ffmpeg" tabindex="-1"><a class="header-anchor" href="#example-4-vapoursynth-ols-ffmpeg" aria-hidden="true">#</a> Example 4: <code>Vapoursynth-&gt;OLS-&gt;ffmpeg</code></h4><blockquote><p>Use <code>Vapoursynth</code> for preprocessing the input, output RGB to <code>OLS</code>, and convert <code>RGB</code> for ffmpeg compression.</p></blockquote><p>The <code>Vapoursynth</code> script <code>input.vpy</code> used:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> vapoursynth <span class="token keyword">as</span> vs
<span class="token keyword">from</span> vapoursynth <span class="token keyword">import</span> core
video <span class="token operator">=</span> core<span class="token punctuation">.</span>lsmas<span class="token punctuation">.</span>LWLibavSource<span class="token punctuation">(</span><span class="token string">r&#39;test.mp4&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 960x540, 24fps</span>

<span class="token comment"># DO SOMETHING</span>

video <span class="token operator">=</span> mvf<span class="token punctuation">.</span>ToRGB<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token operator">=</span>video<span class="token punctuation">,</span> matrix<span class="token operator">=</span><span class="token string">&quot;709&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">&#39;bicubic&#39;</span><span class="token punctuation">)</span>

video<span class="token punctuation">.</span>set_output<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># output gbrp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Command line:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vspipe input.vpy - <span class="token operator">|</span> one_line_shot_args.exe <span class="token parameter variable">-i</span> - <span class="token parameter variable">--config</span> <span class="token string">&quot;Configs/SVFI_Config_pipe_test.ini&quot;</span> <span class="token parameter variable">-t</span> pipe_2 --pipe-in --pipe-iw <span class="token number">1920</span> --pipe-ih <span class="token number">1080</span>  --pipe-in-fps <span class="token number">24</span> --pipe-out --render-only --pipe-in-pixfmt gbrp --pipe-rgb <span class="token operator">|</span>  ffmpeg.exe <span class="token parameter variable">-y</span> <span class="token parameter variable">-vsync</span> cfr <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-vsync</span> cfr <span class="token parameter variable">-pix_fmt</span> rgb24 <span class="token parameter variable">-f</span> rawvideo <span class="token parameter variable">-r</span> <span class="token number">24</span> <span class="token parameter variable">-i</span> - <span class="token parameter variable">-preset:v</span> slow <span class="token parameter variable">-c:v</span> hevc_nvenc <span class="token parameter variable">-pix_fmt</span> yuv420p <span class="token parameter variable">-crf</span> <span class="token number">16</span> output.mp4 <span class="token parameter variable">-y</span> <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-hide_banner</span> <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><ul><li>When using pipes, try to ensure precision alignment and use <code>y4m</code> as much as possible to avoid precision loss when converting <code>y4m</code> to <code>rgb</code>.</li><li>It is recommended to first use SVFI to configure task parameters and start the task, and then use the <code>Config.ini</code> generated in the <code>Configs</code> folder for command line tasks.</li></ul></div>`,36);function v(b,f){const n=i("RouterLink");return t(),p("div",null,[a("div",d,[u,a("p",null,[e("This page is for advanced users. Please read the "),o(n,{to:"/en/pages/advanced-settings/"},{default:r(()=>[e("detailed explanation of advanced content")]),_:1}),e(" first.")])]),m])}const k=s(c,[["render",v],["__file","index.html.vue"]]);export{k as default};
